{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","axios","get","data","console","log","error","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mPAwCeA,EApCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEHC,mBAAS,IAFN,mBAE9BC,EAF8B,KAElBC,EAFkB,KAqBrC,OACI,0BAAMC,SAbS,SAACC,GAChBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAExBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OAEpCN,EAAc,OAOd,2BAAOO,KAAK,OACRC,MAAOT,EACPU,SArBO,SAACP,GAEhBF,EAAcE,EAAEQ,OAAOF,Y,yCCRlBG,EAAM,uCAAE,WAAMC,GAAN,qBAAAC,EAAA,6DACXC,EADW,gDACkCC,UAAUH,GAD5C,+DAEII,IAAMC,IAAIH,GAFd,gBAEVI,EAFU,EAEVA,KACP,IACIC,QAAQC,IAAI,MACd,MAAOC,GACLF,QAAQE,MAAMA,GAND,OASXC,EAAOJ,EAAKA,KAAKK,KAAI,SAAAC,GACxB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVZ,IAAIU,EAAIG,OAAOC,iBAAiBd,QAbtB,kBAoBVQ,GApBU,2CAAF,sDCANO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOZ,EAAS,EAATA,IAGhC,OACI,yBAAKgB,UAAU,0CACX,yBAAKC,IAAKjB,EAAKkB,IAAKN,IACpB,2BAAIA,KCyBDO,EA1BC,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECJJ,SAACA,GAAc,IAAD,EAEZd,mBACtB,CACIoB,KAAK,GACLgB,SAAQ,IALsB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkCtC,OAzBCC,qBAAU,WACP1B,EAAOC,GACN0B,MAAK,SAAAC,GAGEH,EAAS,CACLlB,KAAKqB,EACLL,SAAQ,SAMtB,CAACtB,IAYIuB,ED5BwBK,CAAa5B,GAAhCe,EAFgB,EAErBT,KAAagB,EAFQ,EAERA,QAGpB,OACI,oCACI,wBAAIJ,UAAU,qCAAqClB,GAElDsB,GAAW,uBAAGJ,UAAU,oCAAb,cAChB,yBAAKA,UAAU,aAENH,EAAOJ,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,eACAiB,IAAKjB,EAAIC,IAELD,UEQTkB,EA1BI,WAAK,IAAD,EAEa5C,mBAAU,CAAE,cAFzB,mBAEd6C,EAFc,KAEF9C,EAFE,KAInB,OACI,oCACA,4CAEA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEK8C,EAAWpB,KAAI,SAAAX,GAAQ,OACpB,kBAAC,EAAD,CACA6B,IAAK7B,EACLA,SAAUA,UCb1BgC,IAASC,OAAQ,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.92ae31eb.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue]=useState('');\n\n    const handleChange=(e)=>{ //Metodo que maneja el evento del cambio cuando\n                            //escribo en el input\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        //Validar que no sea un string vacio y que tenga 2 letras por lo menos\n        if(inputValue.trim().length>2){\n\n            setCategories(cats=>[inputValue, ...cats]) //agrego lo que hay en el input a mi arreglo\n            // console.log('se hizo el submit')\n            setInputValue('')\n        }\n    }\n\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\"\n                value={inputValue} //asigno variable del estado\n                onChange={handleChange} //cuando hay un cambio en el input\n            >\n            </input>\n        </form>\n    )\n}\nAddCategory.propTypes={\n    setCategories:PropTypes.func.isRequired\n}\n\n\nexport default AddCategory","import axios from 'axios';\n\nexport const getGif= async(category)=>{\n    const url=`http://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=yGsEUd2oFkyppcVxZBZ5H2aB7uQLZRIf`\n    const {data} = await axios.get(url)\n    try {\n        console.log('OK')\n    } catch (error) {\n        console.error(error)\n    }\n\n    const gifs = data.data.map(img=>{\n       return{\n           id:img.id,\n           title:img.title,\n           url:img.images.downsized_medium.url\n       }\n\n    })\n\n    // console.log(gifs)\n\n    return gifs;\n\n}\n","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => { //desestructuracion del props\n\n    // console.log({id, title, url})\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport {useFetchGifs} from '../hooks/useFetchGifs'\n\nimport {GifGridItem} from './GifGridItem'\n\n\n\nconst GifGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n      \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n        <div className=\"card-grid\">\n          \n                {images.map(img=>\n                    <GifGridItem \n                    key={img.id}\n                    // img={img} \n                    {...img} //mando la info como un objeto\n                    />\n                    // <li key={img.id}>{img.title}</li>\n                )}\n            \n        </div>\n        </>\n    )\n}\n\nexport default GifGrid;","import {useState, useEffect} from 'react'\nimport {getGif} from '../helpers/getGif'\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setstate] = useState(\n        {\n            data:[],\n            loading:true\n        }\n    )\n\n     useEffect(()=>{\n        getGif(category)\n        .then(imgs=>{\n\n         \n                setstate({\n                    data:imgs,\n                    loading:false\n                })\n                \n            \n\n        }); \n    },[category])\n\n\n    // setTimeout(()=>{\n    //     setstate(\n    //         {\n    //             data:[1,2,3,4,5,6,7],\n    //             loading:false\n    //         }\n    //     )\n    // }, 3000)\n\n    return state;\n}\n","import React, {useState} from 'react'\nimport  AddCategory from './components/AddCategory' //componente para agregar categorias de busqueda\nimport GifGrid from './components/GifGrid'; // componente que cargarÃ¡ mis gif en grilla\n\n\nconst GifExpertApp=()=>{\n\n  const [categories, setCategories]=useState ([ 'One Punch'])\n  \n    return(\n        <>\n        <h2>GifExpertApp</h2>\n        {/* Campo de texto donde se ingresa la categoria a buscar */}\n        <AddCategory setCategories={setCategories} />\n        <hr/>\n        <ol>\n            {/*Espacio donde se muestran las tarjetas*/}\n            {categories.map(category=>(\n                <GifGrid  \n                key={category}\n                category={category}/>\n            //    <li key={category}>{category}</li>\n            ))\n            }\n        </ol>\n        </>\n    )\n\n}\n\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp'\n\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}